#!/usr/bin/perl -w

########################################################################
#
#  utility for decimating an entire dataset
#


use strict;

use FindBin;
use lib $FindBin::Bin;
use lib "$FindBin::Bin/../bin";

use DecimateAll;
use Getopt::Long qw(:config bundling auto_abbrev);


########################################################################
#
#  process command line
#

my $datadir = 'data';
my $jobs;
my $start = 0;
my @plans = ();
my $upsample = 0;

my $usage = <<EOT;
Usage: $0 [OPTION...] <report-output-suffix>

  --begin-runs=NUM  start with report NUM (default 0)
  --datadir=DIR     find run suite in DIR (default "data")
  --jobs=COUNT      use COUNT simultaneous jobs (default CPUs - 1)
  --plan=FILE       downsample according to sampling plan in FILE
  --upsample        upsample after downsampling, creating a noisy
                    approximation of the original data
EOT

sub help () {
  print $usage;
  exit 0;
}

my $understood = GetOptions('jobs=i' => \$jobs,
			    'datadir=s' => \$datadir,
			    'begin-runs=i' => \$start,
			    'plan|p=s' => \@plans,
			    'upsample|u' => \$upsample,
			    'help|?' => \&help);

die $usage unless $understood && @ARGV == 1;
my ($suffix) = @ARGV;

$jobs = DecimateAll->cpu_count - 1 unless $jobs;
$jobs = 1 if $jobs < 1;


########################################################################
#
#  decimate the reports
#

# sanity check
my $decimator = "$FindBin::Bin/decimate-sparse";
-x $decimator or die "$decimator is not executable\n";


# how many runs to process?
my $numRuns = new FileHandle "$datadir/stamp-labels" or die "cannot read $datadir/stamp-labels: $!\n";
$numRuns = <$numRuns>;
chomp $numRuns;


# decimate all reports
my $runner = new DecimateAll(jobs => $jobs,
			     datadir => $datadir,
			     suffix => $suffix,
			     decimator => $decimator,
			     upsample => $upsample,
			     plans => \@plans);
$runner->run_tasks($start .. $numRuns - 1);
