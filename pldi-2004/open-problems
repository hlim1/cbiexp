1. sec 1, list of contributions, bullet 1:

"We present a new algorithm ... based on different techniques and 
offering significant improvements over previous work"

->

"We present a new algorithm ... based on techniques that are different 
from and offer significant improvements over previous work"?

=========================================
2. sec 2, para 3:

"Our sampling transformation is general: any collection of stmts within
(or added to) a program may be designated as "instrumentation" and thereby
sampled instead of run conditionally"

I didn't get the "within (or added to)" part.  I thought instrumented code
always refers to code that is added, and not code that is within?

Ben later clarified this but we need to put it into the paper:

We can treat existing code as instrumentation to be sampled even if we 
didn't add it ourself.  assert() statements are a clear candidate for 
this sort of thing.  Our PLDI 2003 paper did this with the assert-like 
statements added by CCured.  From our perspective, that code is "within" 
the program, not "added to" it.


=========================================
3. sec 2, para 5:  General comment on all three scheme descriptions:

We should mention somewhere that the predicates within a site are *not*
sampled independently, that is, if we decide to sample a site, then we
record the value of each predicate at that site.  In a related comment,
maybe we should also mention the constraint on each scheme that for every
predicate P that it produces, there must be a predicate !P.

=========================================
4. sec 2, para 5:

returns: ... We track three predicates: ...

->

returns: ... We track six predicate: ...

We should make the explanation of the returns scheme very similar to that
of the scalar-pairs scheme.

=========================================
5. sec 3.1, para 4:

To summarize, even for a predicate P ..., we can neither X nor Y.

I think we need to switch X and Y in the above sentence because Alex
describes Y first and X next in the preceding 2 para's.

=========================================
6. sec 3.1, 4th last para:

"(because the site where this predicate is sampled is not reached)"

->

"(because the site where this predicate occurs is not reached, or 
is reached but not sampled)"?

=========================================
7. Caption of Table 1(b): lower bound of Increase(P) -> Increase(P)

since we don't explain in the text what "lower bound" is.  
(Alternatively, it should be "lower bound of the confidence interval of
Increase(P)").

=========================================
8. sec 3.4, para 1:

"It is easy to see that several of these predicates are related ..."

We should mention somewhere in the text that we do eliminate logically
related predicates by a conservative static analysis, lest the reviewer
finds so many seemingly logically related predicates in our table
snapshots and complains that we haven't done a straightforward static
analysis to prune the list of thousands of predicates.  We do in fact
perform a straightforward static analysis, but it is conservative in the
presence of sampling, namely, it does not perform an inter-site analysis
but it does perform an intra-site analysis.  The latter, while unsound in
principle, is sound in the limit, and it does reduce the number of
predicates retained after the Increase <= 0 test by a factor of 3 or so.  
I am not sure where exactly to put this stuff (maybe at the point where we
say we discard predicates with Increase <= 0) but will look out for it
during a future scan of the paper.

=========================================
9. The following line in the rhythmbox section (sec 4.2.4):

"It required several hours to isolate each of the two bugs, in part
because rhythmbox is complex and we were unfamiliar with it and in part
because the bugs were violations of subtle invariants."

Saying that we were unfamiliar with rhythmbox probably connotes that we
were familiar with bc, ccrypt, and exif, when in fact we weren't.  So I
think it should go.  Secondly, saying that the bugs were violations of
subtle invariants may connote that those found in the other experiments
weren't violations of subtle invarianta, which I think is not true.

How about saying that the bugs in RHYTHMBOX are related to violations of
complex heap invariants (as Alex noted long back) and then mention that we
currently do not track predicates on heap structures (as Alex mentions at
the end of the Background section (sec 2)) and then round off the para by
saying that we leave this for future work?  Of course, we will retain the
positive sentence that is currently the last sentence of this para:

"We could not have even begun to understand these bugs without the 
information provided by our tool"

=========================================
10. Location of EXIF example

I am not sure whether the EXIF example is at the right place.

=========================================
11. Future Work.

Add one or two lines about future work to the end of the conclusions
section:

1. tracking predicates about the heap structure (remember rhythmbox)
2. creating counterexamples (traces) from predicates by using static
   analysis (will ward off any criticism that predicates aren't always
   sufficient)

=========================================
12. Add references to Ernst and Orso.  [I think we already have enough
references to these folks and the related work section is already
quite long.  Let us give this the least priority.]


