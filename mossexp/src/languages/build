#!/usr/bin/perl
$DIR = "../include";

open(LENUM,">$DIR/languages");
open(STARTS,">$DIR/starts");
open(CHOOSE,">$DIR/lang.choose");
open(SETLANG,">$DIR/lang.set");



foreach $file (`ls *.config`) {
	chop($file);
	system("echo $file");

	open(CONFIGURE,"<$file");
	$lang = <CONFIGURE>;
	chop($lang);
	$option = <CONFIGURE>;
	chop($option);

	$flexname = "Lang" . $lang;

	print LENUM "\t\t$flexname,\n";
	print STARTS "\%START $lang\n";

	print CHOOSE "case $flexname: BEGIN($lang); break;";
        print SETLANG "if (STREQ(s,\"$option\")) language = $flexname;\n";

	$enumfile = $lang . ".enum";
	open(ENUM,">$DIR/$enumfile");

	$matchfile = $lang . ".match";
	open(MATCH,">$DIR/$matchfile");

	
	print ENUM "typedef enum {\n";
	print MATCH "<$lang>\[\\n]\t{ lineno++; }\n";
	print MATCH "<$lang>[ \\t\\r]\t{ }\n";
	$i = 1;
	while (<CONFIGURE>) {
	    @pair = split(/\t/);
	    if ($pair[1] eq "") {
		chop($pair[0]);
		$enum = $lang . "_" . $pair[0];
		if ($i > 1) { print ENUM ",\n"; }
		print ENUM "$enum = $i";
		$i = $i + 2;
		print MATCH "<$lang>$pair[0]\t{ CODE_AND_RETURN($enum); }\n";
	    }
	    elsif ($pair[0] eq "ignore") {
		chop($pair[1]);
		print MATCH "<$lang>$pair[1]\t{ }\n";
	    }
	    elsif ($pair[0] eq "startcommentline") {
		chop($pair[1]);
		print MATCH "<$lang>$pair[1]\t{ nextstate = $lang; if (config.match_comment) { BEGIN(MATCHLINE); } else { BEGIN(IGNORELINE); } }\n";
	    }
	    elsif ($pair[0] eq ".") {
		chop($pair[1]);
		print MATCH "<$lang>$pair[1]\t{ CODE_AND_RETURN($enum); }\n";
	    }
	    else { 	
		chop($pair[1]);
		$enum = $lang . "_" . $pair[0];
		if ($i > 1) { print ENUM ",\n"; }
		print ENUM "$enum = $i";
		$i = $i + 2;
		print MATCH "<$lang>$pair[1]\t{ CODE_AND_RETURN($enum); }\n";
	    }
	}
	close(CONFIGURE);
	
	$keys = $lang . "keys";
	$other = $lang . "_OTHER";
	print ENUM ",\n$other}\n$keys;\n";   # assumes i > 1
	print MATCH "<$lang>\\\>\\\>\\\>\\\>\t{nextstate=$lang; BEGIN(IGNORELINE);}\n";
	print MATCH "<$lang>.\t{ CODE_AND_RETURN($other); }\n";
	close(ENUM);
	close(MATCH);

    }
