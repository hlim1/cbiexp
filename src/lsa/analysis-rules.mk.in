# @configure_input@ 

root ?= /scratch/mulhern/cbiexp
tooldir ?= $(root)/src/lsa
xmldir ?= $(tooldir)/xml
MATLAB = matlab -nodisplay

runsinfo.mat: Xobs.sparse Xtru.sparse f.indices s.indices
	$(MATLAB) -r "path('$(tooldir)',path); convertData()" > /dev/null

flagsinfo.mat: flags.sparse
	$(MATLAB) -r "path('$(tooldir)',path); convertFlagsInfo()" > /dev/null

initialize : runsinfo.mat

numbugaspects := $(if $(numbugaspects),$(numbugaspects),0)
numaspects := $(if $(numaspects),$(numaspects),0)
expdir := $(numaspects)t_$(numbugaspects)b

numrestarts := $(if $(numrestarts),$(numrestarts),0)

prepare_experiment: runsinfo.mat
	mkdir $(expdir)
	echo 'numaspects = $(numaspects)' > $(expdir)/GNUmakefile
	echo 'numbugaspects = $(numbugaspects)' >> $(expdir)/GNUmakefile
	echo 'numrestarts = $(numrestarts)' >> $(expdir)/GNUmakefile
	echo 'include $(tooldir)/analysis-rules.mk' >> $(expdir)/GNUmakefile

	echo 'function Learn = configure()' > $(expdir)/configure.m
	echo '	Learn.K = $(numaspects);' >> $(expdir)/configure.m
	echo '	Learn.Kb = $(numbugaspects);' >> $(expdir)/configure.m
	echo '	Learn.Normalized = 1;' >> $(expdir)/configure.m
ifdef obscounts
	echo '	Learn.TruthCounts = 0;' >> $(expdir)/configure.m
else
	echo '	Learn.TruthCounts = 1;' >> $(expdir)/configure.m
endif
	echo '	Learn.Max_Iterations = 100;' >> $(expdir)/configure.m
	echo '	Learn.Min_Likelihood_Change = 1;' >> $(expdir)/configure.m

prepare_subdirs:
	$(tooldir)/setup.py $(numaspects) $(numbugaspects) $(numrestarts) 

loglikelihoods.txt best:
	$(tooldir)/rank.py $(numrestarts)

rank: loglikelihoods.txt best

results.mat loglikelihood.txt:
	-rm runsinfo.mat
	-rm configure.m
	ln ../../runsinfo.mat
	ln ../configure.m
	$(MATLAB) -r "path('$(tooldir)',path); runOnce()" > /dev/null
	touch results.mat
	touch loglikelihood.txt

clusters.mat: results.mat
	$(MATLAB) -r "path('$(tooldir)',path); clusterByMaxAspect()" > /dev/null
	touch clusters.mat

plsa: results.mat loglikelihood.txt clusters.mat html/summary.xml
	touch plsa

plsa_flags:
	-rm flagsinfo.mat
	ln ../../flagsinfo.mat

html/summary.xml html/features.xml html/runs.xml: results.mat clusters.mat configure.m
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); summarize()" > /dev/null
	mv summary.xml html/summary.xml
	mv features.xml html/features.xml
	mv runs.xml html/runs.xml

summary.html: summary.xml
	xsltproc --path $(xmldir) --path ../../../.. --path . --stringparam source-dir ../../../../src --output summary.html summary.xsl summary.xml
CLEANFILES += summary.html

aspect%.xml : aspect%.xml.raw
	xsltproc --path $(xmldir) --path . --output $@ accum.xsl $<

aspect%.html : aspect%.xml
	xsltproc --path $(xmldir) --path ../../../.. --path . --output $@ feature.xsl $<

aspectsxml: $(basename $(wildcard aspect*.xml.raw))
.PHONY: aspectsxml 

aspectshtml: $(addsuffix .html, $(basename $(wildcard aspect*.xml)))
.PHONY: aspectshtml

html: summary.html
	$(MAKE) aspectsxml
	$(MAKE) aspectshtml
.PHONY: html

clean::
	find . -name 'aspect*.xml.raw' -exec rm '{}' ';'
	find . -name 'aspect*.xml' -exec rm '{}' ';'
	find . -name 'aspect*.html' -exec rm '{}' ';'
	rm -rf $(CLEANFILES)
.PHONY: clean
