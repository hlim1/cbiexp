# @configure_input@ 

root ?= /scratch/mulhern/cbiexp
tooldir ?= $(root)/src/lsa
xmldir ?= $(tooldir)/xml
MATLAB = matlab -nodisplay

prerunsinfo.mat: Xobs.sparse Xtru.sparse f.indices s.indices
	$(MATLAB) -r "path('$(tooldir)',path); convertData('prerunsinfo.mat'); quit()" > /dev/null

preflagsinfo.mat: flags.sparse X.dimensions flags.dimensions
	$(MATLAB) -r "path('$(tooldir)',path); convertFlagsInfo('preflagsinfo.mat'); quit()" > /dev/null

prebugsinfo.mat: bugs.sparse X.dimensions 
	$(MATLAB) -r "path('$(tooldir)',path); convertBugsInfo('prebugsinfo.mat'); quit()" > /dev/null

numbugaspects := $(if $(numbugaspects),$(numbugaspects),0)
numaspects := $(if $(numaspects),$(numaspects),0)
expdir := $(numaspects)t_$(numbugaspects)b

numrestarts := $(if $(numrestarts),$(numrestarts),0)

prepare_experiment: prerunsinfo.mat
	mkdir $(expdir)
	echo 'numaspects = $(numaspects)' > $(expdir)/GNUmakefile
	echo 'numbugaspects = $(numbugaspects)' >> $(expdir)/GNUmakefile
	echo 'numrestarts = $(numrestarts)' >> $(expdir)/GNUmakefile
	echo 'include $(tooldir)/analysis-rules.mk' >> $(expdir)/GNUmakefile

	echo 'function Learn = configure()' > $(expdir)/configure.m
	echo '	Learn.K = $(numaspects);' >> $(expdir)/configure.m
	echo '	Learn.Kb = $(numbugaspects);' >> $(expdir)/configure.m
	echo '	Learn.Normalized = 1;' >> $(expdir)/configure.m
ifdef obscounts
	echo '	Learn.TruthCounts = 0;' >> $(expdir)/configure.m
else
	echo '	Learn.TruthCounts = 1;' >> $(expdir)/configure.m
endif
	echo '	Learn.Max_Iterations = 100;' >> $(expdir)/configure.m
	echo '	Learn.Min_Likelihood_Change = 1;' >> $(expdir)/configure.m
ifdef srunfraction
	echo '	Learn.Fraction_Succeeding_Runs_Retained = $(srunfraction);' >> $(expdir)/configure.m
else
	echo '	Learn.Fraction_Succeeding_Runs_Retained = 1;' >> $(expdir)/configure.m
endif

initialize_experiment: configure.m
	-rm prerunsinfo.mat
	ln ../prerunsinfo.mat
	$(MATLAB) -r "path('$(tooldir)', path); removeRuns('prerunsinfo.mat', 'runsinfo.mat'); quit()" > /dev/null
	-rm prerunsinfo.mat

initialize_bugsinfo: runsinfo.mat
	-rm prebugsinfo.mat
	ln ../prebugsinfo.mat
	$(MATLAB) -r "path('$(tooldir)', path); selectRuns('prebugsinfo.mat', 'runsinfo.mat', 'bugsinfo.mat'); quit()" > /dev/null
	-rm prebugsinfo.mat

prepare_subdirs:
	$(tooldir)/setup.py $(numaspects) $(numbugaspects) $(numrestarts) 

loglikelihoods.txt best:
	$(tooldir)/rank.py $(numrestarts)

rank: loglikelihoods.txt best

results.mat loglikelihood.txt:
	-rm runsinfo.mat
	-rm configure.m
	ln ../runsinfo.mat
	ln ../configure.m
	$(MATLAB) -r "path('$(tooldir)',path); runOnce()" > /dev/null
	touch results.mat
	touch loglikelihood.txt

clusters.mat: results.mat
	$(MATLAB) -r "path('$(tooldir)',path); clusterByMaxAspect()" > /dev/null
	touch clusters.mat

plsa: results.mat loglikelihood.txt clusters.mat
	touch plsa

plsa_flags:
	-rm flagsinfo.mat
	ln ../../flagsinfo.mat

plsa_oracle:
	-rm bugsinfo.mat
	ln ../../bugsinfo.mat

html/summary.xml:
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); summarize()" > /dev/null
	mv summary.xml html/summary.xml

html/features.xml: results.mat
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); summarizeFeatures()" > /dev/null
	mv features.xml html/features.xml

html/runs.xml: results.mat
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); summarizeRuns()" > /dev/null
	mv runs.xml html/runs.xml

html/aspects.xml: results.mat
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); summarizeAspects()" > /dev/null
	mv aspects.xml html/aspects.xml
	mv aspect*.base html

html/claimed_runs.xml html/claimed_runs.png: results.mat
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); runsClaimedByAnyAspect()" > /dev/null
	mv claimed_runs.xml html/claimed_runs.xml
	mv claimed_runs.png html/claimed_runs.png

html/probable_features.xml: results.mat
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); mostProbableFeatures()" > /dev/null
	mv probable_features.xml html/probable_features.xml
	mv aspect_*_probable_features.png html 

html/claimed_features.xml html/claimed_features.png: results.mat
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); featuresClaimedByAnyAspect()" > /dev/null
	mv claimed_features.xml html/claimed_features.xml
	mv claimed_features.png html/claimed_features.png

html/predictive_features.xml: results.mat 
	$(MATLAB) -r "path('$(xmldir)',path); path('$(tooldir)',path); mostPredictiveFeatures()" > /dev/null
	mv predictive_features.xml html/predictive_features.xml

summary: html/summary.xml html/features.xml html/runs.xml html/aspects.xml html/claimed_runs.xml html/claimed_runs.png html/predictive_features.xml html/claimed_features.xml html/claimed_features.png

summary.html: summary.xml runs.xml
	xsltproc --path $(xmldir) --path ../../../.. --path . --stringparam source-dir ../../../../src --output summary.html summary.xsl summary.xml
CLEANFILES += summary.html

aspect_%_probable_features.html : aspect_%.base
	xsltproc --path . --path $(xmldir) --path ../.. --output $@ --stringparam index `cat $<` probable_features.xsl probable_features.xml

aspectsprobablefeatures: $(addsuffix _probable_features.html, $(basename $(wildcard aspect*.base)))
.PHONY: aspectsprobablefeatures 

html: summary.html
	$(MAKE) aspectsprobablefeatures 
.PHONY: html

clean::
	find . -name 'aspect*.html' -exec rm '{}' ';'
	rm -rf $(CLEANFILES)
.PHONY: clean
