#!/usr/bin/perl -w
#-*- cperl -*-

use strict;

use FileHandle;
use FindBin;


########################################################################
#
#  utility subroutines
#


# open a file or die trying
sub try_open(@) {
  my $handle = new FileHandle @_
    or die "cannot read $_[0]: $!\n";
}


########################################################################
#
#  command line processing
#


sub usage() {
  die <<EOF;
Usage: $0 --runs-directory=<dir>

Find the point(s) of failure for a program as recorded in CBI feedback
stack traces.
EOF
}

usage unless @ARGV == 1;
my $runsdir = shift;
-d $runsdir or die "bad runs directory $runsdir: $!\n";


########################################################################
#
#  search for stack traces
#


my $runsList = try_open 'f.runs';
my %seen;

while (<$runsList>) {
  chomp;
  my $runDir = "$runsdir/" . int($_ / 10000) . "/$_";
  my $report = try_open "$runDir/reports";
  my $finishing = 0;

  while (<$report>) {
    if (/^<report id="main-stack-trace">$/ .. /^<\/report>$/) {
      if (/^#2  <signal handler called>$/ .. /^\#\d+  0x[0-9a-f]+ in main \(/) {
	if (/^\#\d+  0x[0-9a-f]+ in \w+ \(.*\) at (.+):(\d+)$/) {
	  unless ($finishing) {
	    my $row = "$1\t$2\n";
	    print $row unless $seen{$row};
	    $seen{$row} = 1;
	    $finishing = 1;
	  }
	}
      }
    }
  }
}
