#!/usr/bin/python -O

import colorsys
import math
import mmap
import os
import stat
import struct
import sys
import xml.parsers.expat

rhoFile = file('rho.bin')
rhoFd = rhoFile.fileno()
rhoSize = os.fstat(rhoFd)[stat.ST_SIZE]
rhoMap = mmap.mmap(rhoFd, rhoSize, access = mmap.ACCESS_READ)

format = 'd'
corrSize = struct.calcsize(format)
predCount = math.sqrt(rhoSize / corrSize)
if predCount == int(predCount):
    predCount = int(predCount)
else:
    print >>sys.stderr, 'irregular predicate count:', predCount
    sys.exit(1)

def rho(a, b):
    linear = predCount * a + b
    byte = linear * corrSize
    bytes = rhoMap[byte : byte + corrSize]
    return struct.unpack(format, bytes)[0]

def generate(sort, proj):
    ranked = []

    def startElement(name, attrs):
	if name != 'predictor':
	    return
	ranked.append(int(attrs['index']))

    parser = xml.parsers.expat.ParserCreate()
    parser.StartElementHandler = startElement

    input = file('all_%s_%s.xml' % (sort, proj))
    parser.ParseFile(input)
    topcount = min(11, len(ranked))

    output = file('top-rho_%s_%s.xml' % (sort, proj), 'w')
    print >>output, '<?xml version="1.0"?><?xml-stylesheet type="text/xsl" href="rho.xsl" xmlns="http://www.w3.org/1999/xhtml"?><!DOCTYPE table SYSTEM "rho.dtd"><table xmlns="http://www.w3.org/1999/xhtml">'
    for a in range(topcount - 1):
	print >>output, '<tr>'
        for b in range(topcount - 1):
	    correlation = rho(ranked[a] - 1, ranked[b] - 1)
	    hue = (1. - abs(correlation)) * 2 / 3
	    rgb = [ int(channel * 255) for channel in colorsys.hsv_to_rgb(hue, 0.26, 1) ]
	    style = 'background: rgb(%d, %d, %d)' % (rgb[0], rgb[1], rgb[2])
	    if a == b:
		style = style + '; border: 1px solid black'
	    print >>output, '<td title="ranks: (%d, %d)" style="%s">%+.3f</td>' % (a + 1, b + 1, style, correlation)
	print >>output, '</tr>'
    print >>output, '</table>'

for sort in ['hs', 'hl']:
    for proj in ['circular', 'linear']:
	generate(sort, proj)
