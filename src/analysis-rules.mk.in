# @configure_input@

root := ../..
experiment ?= ..
datadir ?= $(experiment)/data
corrdir := $(root)/correlations
tooldir := $(root)/src
training-runs ?= 0

sitesdir ?= $(experiment)/share
sitesglob := $(experiment)/share/*.sites
sites := $(wildcard $(sitesglob))
sites := $(if $(sites), $(sites), $(error no sites files in $(sitesglob)))

time := /usr/bin/time
CXX := @CXX@
CPPFLAGS := @CPPFLAGS@ -I$(tooldir)
CXXFLAGS := @CXXFLAGS@ -W -Wall -Werror
LEXLIB := @LEXLIB@
build = $(MAKE) update-tools=

sparsebase := fobs sobs ftr str
sparse := $(sparsebase:=.) $(sparsebase:=.ir) $(sparsebase:=.jc) $(sparsebase:=.meta)

schemes ?= all branches g-object-unref returns scalar-pairs
sorts := lb is fs nf hl hs
projections := none #circular linear
views := $(foreach scheme, $(schemes), $(foreach sort, $(sorts), $(foreach projection, $(projections), $(scheme)_$(sort)_$(projection).xml)))
#topRho := $(foreach sort, hl hs, $(foreach proj, circular linear, top-rho_$(sort)_$(proj).xml))

links :=					\
	bug-o-meter.css				\
	bug-o-meter.dtd				\
	bug-o-meter.xsl				\
	corrected-view.dtd			\
	corrected-view.xsl			\
	logo.css				\
	logo.xsl				\
	predictor-info.dtd			\
	projected-view.dtd			\
	projected-view.xsl			\
	projections.dtd				\
	projections.xml				\
	rho.dtd					\
	rho.xsl					\
	sorts.dtd				\
	sorts.xml				\
	summary.css				\
	summary.dtd				\
	summary.xsl				\
	view.css				\
	view.dtd				\
	view.xsl

web :=							\
	$(views)					\
	$(links)					\
	$(topRho)					\
	$(web_extras)					\
	all_hl_corrected-exact-complete.xml		\
	all_hl_corrected-approximate-complete.xml	\
	predictor-info.xml				\
	summary.xml

publish ?= $(HOME)/www/$(name)-new

all: $(web)
.PHONY: all

publish: $(web:%=$(publish)/%)
.PHONY: publish

$(publish)/%: %
	[ -d $(@D) ] || mkdir $(@D)
	cp $< $@

links: $(links)
$(links):
	ln -s $(tooldir)/$@ .
clean:: ; rm -f $(links)

predictor-info.xml: xmlify-results preds.txt
	./$< $(xmlify_results_flags)
	$(build) $(@:.xml=.dtd) bug-o-meter.dtd
	xmllint --valid --noout $@
clean:: ; rm -f predictor-info.xml

xmlify-results: %: $(tooldir)/%.o sites.o units.o $(tooldir)/libanalyze.a
	$(LINK.cc) $^ -o $@
clean:: ; rm -f xmlify-results

$(filter-out %_none.xml, $(views)): project preds.txt rho.bin
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) $(projected_view_flags)
	$(build) projected-view.dtd view.dtd
	xmllint --valid --noout $(filter-out %_none.xml, $(views))
clean:: ; rm -f $(filter-out %_none.xml, $(views))

project: $(tooldir)/project.o sites.o units.o $(tooldir)/libanalyze.a $(tooldir)/Score/libScore.a
	$(LINK.cc) $^ -o $@
clean:: ; rm -f project

$(topRho): top-rho_%: $(tooldir)/top-rho all_% rho.bin
	./$<
	$(build) rho.dtd
	xmllint --valid --noout $(topRho)
clean:: ; rm -f $(topRho)

rho.bin: $(corrdir)/readsp.mexglx calculate.m $(sparse)
	echo "fwrite(fopen('$@','w'), rho, 'double');" | $(time) matlab -nodisplay -nojvm -r calculate
	test -s $@
clean:: ; rm -rf rho.bin mats

$(corrdir)/readsp.mexglx: force
	$(MAKE) -C $(@D) $(@F)

calculate.m: $(corrdir)/genMscript.pl $(sparsebase:=.meta)
	$(time) ./$< .
clean:: ; rm -f calculate.m

$(sparse): $(corrdir)/mhn2sparsemat.pl f.runs s.runs obs.txt tru.txt
	$(time) ./$< . .
	for goal in $(sparse); do test -r $$goal; done
clean:: ; rm -f $(sparse)

all_hl_corrected-%.xml: $(tooldir)/corrective-ranking/% f.runs obs.txt tru.txt
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) $(corrected_view_flags)
	$(build) bug-o-meter.dtd corrected-view.dtd projected-view.dtd view.dtd
	xmllint --valid --noout $@
clean:: ; rm -f all_hl_corrected-exact-complete.xml all_hl_corrected-approximate-complete.xml

ifndef report-series
stamp-decimate := $(datadir)/stamp-convert-reports
else
stamp-decimate := $(datadir)/stamp-decimate-$(report-series)
$(stamp-decimate):
	$(build) plan-$(report-series).txt $(datadir)/stamp-convert-reports $(tooldir)/decimate-all $(tooldir)/decimate-sparse
	$(time) $(tooldir)/decimate-all --begin-runs=$(training-runs) --datadir=$(datadir) --plan=plan-$(report-series).txt $(report-series)
	cp plan-$(report-series).txt $@
endif

obs.txt tru.txt: compute-obs-tru $(stamp-decimate) preds.txt s.runs f.runs
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) --report-suffix=$(report-series)
clean:: ; rm -f obs.txt tru.txt

compute-obs-tru: $(tooldir)/compute_obs_tru.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f compute-obs-tru

$(filter %_none.xml, $(views)): gen-views preds.txt
	$(build) view.dtd
	./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) $(view_flags)
	xmllint --valid --noout $(filter %_none.xml, $(views))
clean:: ; rm -f $(filter %_none.xml, $(views))

gen-views: $(tooldir)/gen_views.o sites.o
	$(LINK.cc) $^ -L$(tooldir) -L$(tooldir)/Score -lanalyze -lScore -o $@
clean:: ; rm -f gen-views

summary.xml: gen-summary preds.txt s.runs f.runs
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) --source-directory=../src >$@
	xmllint --valid --noout $@
clean:: ; rm -f summary.xml

gen-summary: $(tooldir)/gen_summary.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f gen-summary

preds.txt: compute-results s.runs f.runs $(stamp-decimate)
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) --report-suffix=$(report-series)
clean:: ; rm -f preds.txt

compute-results: $(tooldir)/compute_results.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f compute-results

$(datadir)/stamp-convert-reports:
	$(build) convert-reports
	./convert-reports --runs-directory=$(datadir)
	touch $@

convert-reports: $(tooldir)/convert_reports.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze $(LEXLIB) -o $@
clean:: ; rm -f convert-reports

s.runs f.runs: $(tooldir)/process_run_labels $(datadir)/stamp-labels
	$(time) $< --runs-directory=$(datadir)
clean:: ; rm -f s.runs f.runs

prior-dist: fpriors.dat spriors.dat
fpriors.dat spriors.dat: $(tooldir)/gather_prior_dist s.runs f.runs preds.txt
	$(time) ./$< --runs-directory=$(datadir)
clean:: ; rm -f fpriors.dat spriors.dat

compute-nonconst-preds: train.runs val.runs nonconst_preds.txt
train.runs val.runs nonconst_preds.txt: compute_nonconst_preds s.runs f.runs
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir)
clean:: ; rm -f train.runs val.runs nonconst_preds.txt

sites.o units.o: %.o: %.cc
clean:: ; rm -f sites.o units.o

sites.cc units.cc: $(tooldir)/map_sites $(tooldir)/map_sites.sed $(sites)
	$<.sed $(sites) | $<
clean:: ; rm -f sites.cc units.cc

plan-inverse-100.txt: $(tooldir)/sampling-plans/inverse max-observed.txt
	$< 100 <max-observed.txt >$@
clean:: ; rm -f plan-inverse-100.txt

max-observed.txt: %.txt: % s.runs f.runs $(datadir)/stamp-convert-reports
	$(time) ./$< --end-runs=$(training-runs) --runs-directory=$(datadir) >$@
clean:: ; rm -f max-observed.txt

max-observed: %: $(tooldir)/%.o units.o $(tooldir)/libanalyze.a
	$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@
clean:: ; rm -f max-observed


########################################################################


update-tools := update-tools

$(tooldir)/analysis-rules.mk: force
	$(MAKE) -C $(@D) $(@F)

$(tooldir)/%: $(update-tools)

update-tools: force
	$(MAKE) -C $(tooldir)
.PHONY: update-tools


.PHONY: clean

force:
.PHONY: force

.DELETE_ON_ERROR:
