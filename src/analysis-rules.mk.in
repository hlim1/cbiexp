# @configure_input@

root ?= ../..
experiment ?= ..
datadir ?= $(experiment)/data
corrdir := $(root)/correlations
tooldir := $(root)/src
training-runs ?= 0

sitesdir ?= $(experiment)/share
sitesglob := $(experiment)/share/*.sites
sites := $(wildcard $(sitesglob))
sites := $(if $(sites), $(sites), $(error no sites files in $(sitesglob)))
xmlify-add-suffix := .html

time := /usr/bin/time
CXX := @CXX@
CPPFLAGS := @CPPFLAGS@ -I$(tooldir)
CXXFLAGS := @CXXFLAGS@ -W -Wall -Werror
LEXLIB := @LEXLIB@
build = $(MAKE) update-tools=

sparsebase := fobs sobs ftr str
sparse := $(sparsebase:=.) $(sparsebase:=.ir) $(sparsebase:=.jc) $(sparsebase:=.meta)

schemes ?= all branches g-object-unref returns scalar-pairs
sorts := lb is fs nf hl hs lbnf
projections := none #circular linear
views := $(foreach scheme, $(schemes), $(foreach sort, $(sorts), $(foreach projection, $(projections), $(scheme)_$(sort)_$(projection).xml)))
#topRho := $(foreach sort, hl hs, $(foreach proj, circular linear, top-rho_$(sort)_$(proj).xml))

find-zooms := find . -maxdepth 1 -name 'zoom-corrected-*.xml'

links :=					\
	bug-o-meter.css				\
	bug-o-meter.dtd				\
	bug-o-meter.xsl				\
	corrected-view.dtd			\
	corrected-view.xsl			\
	link-cell.css				\
	logo.css				\
	logo.xsl				\
	logreg.dtd				\
	logreg.xsl				\
	operand.dtd				\
	operands.xsl				\
	predictor-info.dtd			\
	projected-view.dtd			\
	projected-view.xsl			\
	projections.dtd				\
	projections.xml				\
	rho.dtd					\
	rho.xsl					\
	sorts.dtd				\
	sorts.xml				\
	summary.css				\
	summary.dtd				\
	summary.xsl				\
	view.css				\
	view.dtd				\
	view.xsl

corrected :=						\
	all_hl_corrected-exact-complete.xml		\
	all_hl_corrected-approximate-complete.xml

web :=						\
	$(views)				\
	$(corrected)				\
	$(links)				\
	$(topRho)				\
	$(web_extras)				\
	predictor-info.xml			\
	stamp-src				\
	summary.xml

publish ?= $(HOME)/www/$(name)-new

all: $(web)
.PHONY: all

publish: $(web:%=$(publish)/%)
	$(find-zooms) -exec cp '{}' $(publish) ';'
.PHONY: publish

$(publish)/stamp-src: stamp-src
	rm -rf $(publish)/src
	cp -a src $< $(publish)

$(publish)/%: %
	[ -d $(@D) ] || mkdir $(@D)
	cp $< $@

stamp-src: $(tooldir)/htmlify-sources
	$< $(experiment)/src
	touch $@
clean:: ; rm -rf stamp-src src

links: $(links)
$(links): %: $(tooldir)/%
	if [ -L $@ ]; then rm -f $@; fi
	cp $< $@
clean:: ; rm -f $(links)

predictor-info.xml: xmlify-results preds.txt
	./$< $(source-strip-prefixes:%=--strip-prefix=%) $(xmlify_results_flags)
	$(build) $(@:.xml=.dtd) bug-o-meter.dtd operand.dtd predictor-info.dtd
	xmllint --valid --noout $@
clean:: ; rm -f predictor-info.xml

xmlify-results: %: $(tooldir)/%.o sites.o units.o $(tooldir)/libanalyze.a
	$(LINK.cc) $^ -o $@
clean:: ; rm -f xmlify-results

$(filter-out %_none.xml, $(views)): project preds.txt rho.bin
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) $(projected_view_flags)
	$(build) projected-view.dtd view.dtd
	xmllint --valid --noout $(filter-out %_none.xml, $(views))
clean:: ; rm -f $(filter-out %_none.xml, $(views))

project: $(tooldir)/project.o sites.o units.o $(tooldir)/libanalyze.a $(tooldir)/Score/libScore.a
	$(LINK.cc) $^ -o $@
clean:: ; rm -f project

$(topRho): top-rho_%: $(tooldir)/top-rho all_% rho.bin
	$<
	$(build) rho.dtd
	xmllint --valid --noout $(topRho)
clean:: ; rm -f $(topRho)

rho.bin: $(corrdir)/readsp.mexglx calculate.m $(sparse)
	echo "fwrite(fopen('$@','w'), rho, 'double');" | $(time) matlab -nodisplay -nojvm -r calculate
	test -s $@
clean:: ; rm -rf rho.bin mats

$(corrdir)/readsp.mexglx: force
	$(MAKE) -C $(@D) $(@F)

calculate.m: $(corrdir)/genMscript.pl $(sparsebase:=.meta)
	$(time) $< .
clean:: ; rm -f calculate.m

$(sparse): $(corrdir)/mhn2sparsemat.pl f.runs s.runs obs.txt tru.txt
	$(time) $< . .
	for goal in $(sparse); do test -r $$goal; done
clean:: ; rm -f $(sparse)

$(corrected): all_hl_corrected-%.xml: $(tooldir)/corrective-ranking/% f.runs obs.txt tru.txt
	$(time) $< --zoom --begin-runs=$(training-runs) --runs-directory=$(datadir) $(corrected_view_flags)
	$(build) bug-o-meter.dtd corrected-view.dtd link-cell.css logo.css projected-view.dtd view.dtd
	xmllint --valid --noout $@
	$(find-zooms) -print0 | xargs --null --no-run-if-empty xmllint --valid --noout
clean::
	rm -f all_hl_corrected-exact-complete.xml all_hl_corrected-approximate-complete.xml
	$(find-zooms) -exec rm '{}' ';'

ifndef report-series
stamp-decimate := $(datadir)/stamp-convert-reports
else
stamp-decimate := $(datadir)/stamp-decimate-$(report-series)
$(stamp-decimate):
	$(build) plan-$(report-series).txt $(datadir)/stamp-convert-reports $(tooldir)/decimate-all $(tooldir)/decimate-sparse
	$(time) $(tooldir)/decimate-all --begin-runs=$(training-runs) --datadir=$(datadir) --plan=plan-$(report-series).txt $(report-series)
	cp plan-$(report-series).txt $@
endif

obs.txt tru.txt: compute-obs-tru $(stamp-decimate) preds.txt s.runs f.runs
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) --report-suffix=$(report-series)
clean:: ; rm -f obs.txt tru.txt

compute-obs-tru: $(tooldir)/compute_obs_tru.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f compute-obs-tru

$(filter %_none.xml, $(views)): gen-views preds.txt
	$(build) operands.xsl view.dtd view.xsl
	./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) $(view_flags)
	xmllint --valid --noout $(filter %_none.xml, $(views))
clean:: ; rm -f $(filter %_none.xml, $(views))

gen-views: $(tooldir)/gen_views.o sites.o
	$(LINK.cc) $^ -L$(tooldir) -L$(tooldir)/Score -lanalyze -lScore -o $@
clean:: ; rm -f gen-views

summary.xml: gen-summary preds.txt s.runs f.runs
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) --source-directory=src >$@
	$(build) link-cell.css logo.css summary.css summary.dtd summary.xsl
	xmllint --valid --noout $@
clean:: ; rm -f summary.xml

gen-summary: $(tooldir)/gen_summary.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f gen-summary

preds.txt: compute-results s.runs f.runs $(stamp-decimate)
	$(time) ./$< --begin-runs=$(training-runs) --runs-directory=$(datadir) --report-suffix=$(report-series)
clean:: ; rm -f preds.txt

compute-results: $(tooldir)/compute_results.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f compute-results

$(datadir)/stamp-convert-reports:
	$(build) convert-reports
	./convert-reports --runs-directory=$(datadir)
	touch $@

convert-reports: $(tooldir)/convert_reports.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze $(LEXLIB) -o $@
clean:: ; rm -f convert-reports

extract-timestamps: $(tooldir)/extract_timestamps.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze $(LEXLIB) -o $@
clean:: ; rm -f extract-timestamps

stamp-extract-timestamps:
	$(build) extract-timestamps
	./extract-timestamps --runs-directory=$(datadir)
	touch $(datadir)/$@

s.runs f.runs: $(tooldir)/process_run_labels $(datadir)/stamp-labels
	$(time) $< --runs-directory=$(datadir)
clean:: ; rm -f s.runs f.runs

logreg.xml: %.xml: %.txt %
	./$* <$< >$@
	$(build) logreg.dtd logreg.xsl operand.dtd operands.xsl view.css
	xmllint --valid --noout $@
clean:: ; rm -f logreg.xml

logreg: %: $(tooldir)/%.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f logreg

gather_prior_dist: %: $(tooldir)/%.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f gather_prior_dist

prior-dist: gather_prior_dist s.runs f.runs preds.txt
	$(time) ./$< --runs-directory=$(datadir)
	mv fpriors.dat fpriors-full.dat
	mv spriors.dat spriors-full.dat
	$(time) ./$< --runs-directory=$(datadir) --report-suffix=$(report-series)

gather_prior_truths: %: $(tooldir)/%.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f gather_prior_truths

truth-dist: gather_prior_truths s.runs f.runs preds.txt
	$(time) ./$< --runs-directory=$(datadir)

compute_nonconst_preds: %: $(tooldir)/%.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -lgsl -lgslcblas -lm -o $@
clean:: ; rm -f compute_nonconst_preds

nonconst-preds: compute_nonconst_preds s.runs f.runs
	$(time) ./$< --runs-directory=$(datadir) --report-suffix=$(report-series)
clean:: ; rm -f train.runs val.runs nonconst_preds.txt

train_utillog: %: $(tooldir)/%.o sites.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -lgsl -lgslcblas -lm -o $@
clean:: ; rm -f train_utillog

theta: train_utillog train.runs val.runs nonconst_preds.txt
	$(time) ./$< --runs-directory=$(datadir) --report-suffix=$(report-series)
clean:: ; rm -f theta.txt train_lls.txt val_lls.txt confmat.txt

sites.o units.o: %.o: %.cc
clean:: ; rm -f sites.o units.o

sites.cc units.cc: $(tooldir)/map_sites $(tooldir)/map_sites.sed $(sites)
	$<.sed $(sites) | $<
clean:: ; rm -f sites.cc units.cc

plan-inverse-100.txt: $(tooldir)/sampling-plans/inverse max-observed.txt
	$< 100 <max-observed.txt >$@
clean:: ; rm -f plan-inverse-100.txt

max-observed.txt: %.txt: % s.runs f.runs $(datadir)/stamp-convert-reports
	$(time) ./$< --end-runs=$(training-runs) --runs-directory=$(datadir) >$@
clean:: ; rm -f max-observed.txt

max-observed: %: $(tooldir)/%.o units.o $(tooldir)/libanalyze.a
	$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@
clean:: ; rm -f max-observed

build_tsgraph: $(tooldir)/build_tsgraph.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
	$(time) $@ --runs-directory=$(datadir) --timestamp-when=first
	$(time) $@ --runs-directory=$(datadir) --timestamp-when=last
clean:: ; rm -f build_tsgraph

find_tsSCC: $(tooldir)/find_tsSCC.o units.o sites.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@

sccgraph: find_tsSCC ts_nodes.first.txt ts_edges.first.txt ts_nodes.last.txt ts_edges.last.txt
	$(time) $< --timestamp-when=first
	$(time) $< --timestamp-when=last

sanity_check: $(tooldir)/sanity_check.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
	$(time) $@ --runs-directory=$(datadir) --timestamp-when=first

partial_order: $(tooldir)/partial_order.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
	$(time) $@ --runs-directory=$(datadir) --timestamp-when=first
	$(time) $@ --runs-directory=$(datadir) --timestamp-when=last

get_ts_ordering: $(tooldir)/get_ts_ordering.o units.o sites.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@

W.dat: get_ts_ordering $(datadir)/stamp-extract-timestamps
	$(time) $< --begin-runs=$(training-runs) --runs-directory=$(datadir) --timestamp-when=first

get_tp_weights: $(tooldir)/get_tp_weights.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@

X.dat: get_tp_weights hyperparms.txt
	$(time) $< --begin-runs=$(training-runs) --runs-directory=$(datadir) --report-suffix=$(report-series)

collect_parmstats: $(tooldir)/collect_parmstats.o units.o sites.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -o $@
clean:: ; rm -f colect_parmstats

parmstats.txt: collect_parmstats $(stamp-decimate) s.runs f.runs
	$(time) $< --begin-runs=$(training-runs) --runs-directory=$(datadir) --report-suffix=$(report-series) --sample-rates=$(stamp-decimate)
clean:: ; rm -f parmstats.txt

est_hyperparms: $(tooldir)/est_hyperparms.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -lgsl -lgslcblas -lm -o $@
clean:: ; rm -f est_hyperparms

hyperparms.txt: est_hyperparms parmstats.txt
	$(time) $< --begin-runs=$(training-runs) --runs-directory=$(datadir) 

chi2test: $(tooldir)/chi2test.o units.o
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -lgsl -lgslcblas -lm -o $@

chi2stats.txt: chi2test parmstats.txt fpriors.dat fpriors-full.dat spriors.dat spriors-full.dat
	$(time) $<

calc_truthprobs: $(tooldir)/calc_truthprobs.o units.o sites.o 
	$(LINK.cc) $^ -L$(tooldir) -lanalyze -lm -o $@

#truthprobs: calc_truthprobs parmstats.txt preds.txt
truthprobs: calc_truthprobs
	$(time) $< --begin-runs=$(training-runs) --runs-directory=$(datadir) --report-suffix=$(report-series)

########################################################################


update-tools := update-tools

$(tooldir)/analysis-rules.mk: $(update-tools)
	$(MAKE) -C $(@D)

update-tools:
.PHONY: update-tools

.PHONY: clean

force:
.PHONY: force

.DELETE_ON_ERROR:
