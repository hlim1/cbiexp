#!/usr/bin/perl -w
# -*- cperl -*-


my %schemeCode = ( 'branches' => 'B',
		   'float-kinds' => 'F',
		   'g-object-unref' => 'G',
		   'returns' => 'R',
		   'scalar-pairs' => 'S' );

sub cleanOperand {
  # remove function name prefix on local variables
  s/[a-zA-Z_][a-zA-Z_0-9]*\$//g;

  # remove long long integer constant suffixes
  s/([0-9]+)LL/$1/g;
  s/([0-9]+)ULL/$1/g;

  # backslash-escape backslashes
  s/\\/\\\\/g;

  # backslash-escape quotation marks,
  s/\"/\\\"/g;

  # entity-escape special XML characters
  s/&/&amp;/g;
  s/\</&lt;/g;
  s/\>/&gt;/g;

  return "\"$_\"";
}


my @units;
my $sites = 0;


########################################################################
#
#  sites array
#


print <<'EOT';
#include <site_t.h>
#include <unit_t.h>


extern const struct site_t sites[] = {
EOT


while (<>) {
  $_ =~ /^\<sites unit="([0-9a-f]{32})" scheme="([-a-z]+)"\>\n$/
    or die "malformed sites tag";
  my ($signature, $scheme) = ($1, $2);
  my $sitesInUnit = 0;
  my $schemeCode = $schemeCode{$scheme};
  my $siteOffset = $sites;

  while (<>) {
    chomp;
    last if $_ eq "</sites>";
    my @fields = split '\t', $_;

    my $cfg;
    my @operands;

    if ($scheme eq 'scalar-pairs') {
      ($cfg, @operands) =
	@fields == 9 ? ($fields[3], $fields[4], $fields[7])
	  : @fields == 6 ? ($fields[3], $fields[4], $fields[5])
	    : @fields == 5 ? ('-1', $fields[3], $fields[4])
	      : undef;
    } else {
      ($cfg, @operands) =
	@fields == 7 ? ($fields[3], $fields[4])
	  : @fields == 5 ? ($fields[3], $fields[4])
	    : @fields == 4 ? ('-1', $fields[3])
	      : undef;
    };

    die 'unexpeted field count (', scalar @fields, ") for $scheme site"
      unless defined $cfg && @operands;

    @operands = map &cleanOperand, @operands;
    local $" = ', ';
    print "\t{ \"$fields[0]\", $fields[1], \"$fields[2]\", $cfg, '$schemeCode', { @operands } },\n";
    ++$sitesInUnit;
    ++$sites;
  }

  push @units, { signature => $signature,
		 schemeCode => $schemeCode,
		 sitesInUnit => $sitesInUnit,
		 siteOffset => $siteOffset };
}


print <<'EOT';
	{ 0, 0, 0, 0, 0, { 0, 0 } }
};

extern const unsigned NumSites = sizeof(sites) / sizeof(sites[0]) - 1;

EOT


########################################################################
#
#  units array
#

print "\nextern const struct unit_t units[] = {\n";
print "\t{ '$_->{schemeCode}', \"$_->{signature}\", $_->{sitesInUnit}, &sites[$_->{siteOffset}] },\n"
  foreach @units;
print <<'EOT'
	{ 0, 0, 0, 0 }
};

extern const unsigned NumUnits = sizeof(units) / sizeof(units[0]) - 1;
EOT
