#!/usr/bin/perl -w

use strict;

use File::Find;
use FileHandle;
use FindBin;

use lib "$FindBin::Bin";
use SiteConfig;
use Utils;

Utils::role 'client';
Utils::redirect;


########################################################################
#
#  find some tunes
#

my @music;

sub wanted {
    return if -d $_;
    return unless /\.(flac|mp3|ogg|wav)$/i;
    push @music, $File::Find::name;
}

find \&wanted, @SiteConfig::musicdirs;


########################################################################
#
#  prepare for sampler data collection
#

$ENV{GNOME_DISABLE_CRASH_DIALOG} = 1;
$ENV{SAMPLER_DEBUGGER} = '/usr/share/sampler/print-debug-info';
$ENV{SAMPLER_FILE} = 'client/reports';
$ENV{SAMPLER_REAL_EXECUTABLE} = $SiteConfig::rhythmbox;
$ENV{SAMPLER_SPARSITY} = 1;

delete $ENV{SAMPLER_REPORT_FD};


########################################################################
#
#  start playback with a randomly selected song
#

my $song = $music[int rand @music];
Utils::note 'initial-song', $song;

system { $SiteConfig::rhythmbox } $SiteConfig::rhythmbox, $song;
Utils::note 'outcome', $?;


########################################################################
#
#  sanity check sampler output
#

my $handle = new FileHandle $ENV{SAMPLER_FILE}, 'r';

if ($handle) {
    my $last;
    $last = $_ while <$handle>;
    if (! defined $last) {
	Utils::note '../bad', 'reports file empty';
    } elsif ($last ne "</reports>\n") {
	Utils::note '../bad', 'reports file ends abruptly';
    }
} else {
    Utils::note '../bad', 'reports file missing';
}
