#!/usr/bin/perl -w
#-*- cperl -*-


use strict;

use Cwd;
use FindBin;
use File::Temp qw(tempfile);
use FileHandle;
use Getopt::Long qw(:config bundling auto_abbrev);

my $RunsPerSubdirectory = 10000;


########################################################################
#
#  sanity check
#

my $cwd = getcwd;
my $run_once = 'bin/run-once';
my $label_once = 'bin/label-once';

unless (-x $run_once && -x $label_once) {
    warn "Error: current directory is not set up for scripted CBI runs.\n\n";
    warn "  $run_once script is missing or not executable\n" unless -x $run_once;
    warn "  $label_once script is missing or not executable\n" unless -x $label_once;
    exit 2;
}


########################################################################
#
#  process command line
#

my $jobs;
my $verbose;
my $datadir = 'data';
my $dry_run;

my $usage = "Usage: $0 [--jobs=<count>] [--verbose] [--datadir=<dir>] <num-runs>\n";

sub help () {
  print $usage;
  exit 0;
}

my $understood = GetOptions('jobs=i' => \$jobs,
			    'verbose' => \$verbose,
			    'datadir=s' => \$datadir,
			    'dry-run' => \$dry_run,
			    'help|?' => \&help);

die $usage unless $understood && @ARGV == 1;

$verbose |= defined $dry_run;


unless ($jobs) {
    $jobs = 0;
    my $cpuinfo = new FileHandle '/proc/cpuinfo';
    while (<$cpuinfo>) {
	++$jobs if /^processor\t/;
    }
    --$jobs;
}

$jobs = 1 if $jobs < 1;


my ($num_runs) = @ARGV;


########################################################################
#
#  build temporary makefile
#

local ($,, $\) = ("\n", "\n");

my ($handle, $filename) = tempfile(UNLINK => 1);

foreach (0 .. ($num_runs - 1)) {
  my $subdir = int($_ / $RunsPerSubdirectory);
  print $handle "stamp-labels: $subdir/$_/label";
}

print $handle ("num_runs = $num_runs",
	       "label_once = $cwd/$label_once",
	       "run_once = $cwd/$run_once",
	       "include $FindBin::Bin/make-runs.mk");

close $handle;


########################################################################
#
#  start the build
#

# scrub environment in case we are inside a larger makefile
delete @ENV{'MAKEFILES', 'MAKFLAGS'};

# prepare data storage area
mkdir $datadir;

# perform any other setup work needed before the runs begin
my $prep = "bin/prepare-runs";
if (-x $prep && ! $dry_run) {
    (system { $prep } $prep) == 0 or die "cannot run $prep: $!\n";
}

# do not use exec here; it interferes with tempfile cleanup
my @make = ('nice', 'make', '-C', $datadir, '-j', $jobs, '-f', $filename);
push @make, '-s' unless $verbose;
push @make, '-n' if $dry_run;
system @make;
exit($? >> 8 || $? & 127);
